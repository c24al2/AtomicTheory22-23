Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.drive;\n\nimport com.acmerobotics.dashboard.config.Config;\nimport com.acmerobotics.roadrunner.profile.MotionProfile;\nimport com.acmerobotics.roadrunner.profile.MotionProfileGenerator;\nimport com.acmerobotics.roadrunner.profile.MotionState;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.DcMotorEx;\nimport com.qualcomm.robotcore.hardware.Servo;\nimport com.qualcomm.robotcore.hardware.DcMotorSimple;\nimport com.qualcomm.robotcore.hardware.Gamepad;\nimport com.qualcomm.robotcore.hardware.HardwareMap;\nimport com.qualcomm.robotcore.hardware.PIDFCoefficients;\nimport com.qualcomm.robotcore.util.ElapsedTime;\n\n@Config\npublic class IntakeandLiftPID {\n    public static double TICKS_PER_REV = 384.5;\n    // TODO: TUNE SPOOL RADIUS FROM FILE\n    public static double SPOOL_RADIUS = .75;\n\n    public static PIDFCoefficients INTAKE_PID = new PIDFCoefficients(.009, 0, 0.0002, 0);\n\n    public static double MAX_VEL = 133000;\n    public static double MAX_ACCEL = 2000;\n    public static double MAX_JERK = 0;  // Jerk isn't used if it's 0, but it might end up being necessary\n\n    public static double POWER_WEIGHT = 0.8;\n\n    //Junction Positions listed in inches, later converted to encoder ticks\n    public static double HIGHJUNCTION = 33.5;\n    public static double MEDIUMJUNCTION = 23.5;\n    public static double LOWJUNCTION = 13.5;\n    public static double GROUNDJUNCTION = 0.563;\n    public static double PICKUP_CONE_1 = 5*1.22;\n    public static double PICKUP_CONE_2 = 4*1.22;\n    public static double PICKUP_CONE_3 = 3*1.22;\n    public static double PICKUP_CONE_4 = 2*1.22;\n    public static double PICKUP_CONE_5 = 1.22;\n\n    // TODO: Make private when we don't need them to be public anymore\n    public ElapsedTime timer;\n    // TODO: Remove telemetry variables\n    public double currentVelocity = 0;\n    public double targetVelocity = 0;\n    public double velocityError = 0;\n\n    public DcMotorEx intake;\n    public Servo clawServo;\n    public MotionProfile storedProfile;\n\n    public IntakeandLiftPID(HardwareMap hardwareMap) {\n        timer = new ElapsedTime();\n        intake = hardwareMap.get(DcMotorEx.class, \"intake\");\n        clawServo = hardwareMap.get(Servo.class, \"clawServo\");\n\n        intake.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n        intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n        intake.setPIDFCoefficients(DcMotor.RunMode.RUN_TO_POSITION, INTAKE_PID);\n        intake.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n    }\n\n    public void clawOpen(){\n        clawServo.setPosition(-1.0);\n    }\n    public void clawClose(){\n        clawServo.setPosition(1.0);\n    }\n\n    public int distanceToEncoders(double distance){\n        double encoderRatio = TICKS_PER_REV/2 * Math.PI * SPOOL_RADIUS;\n        double encoderConverted = distance*encoderRatio;\n        int intEncoder = (int) encoderConverted;\n        return intEncoder;\n    }\n\n    public void generateMotionProfile(double ticks) {\n        storedProfile = MotionProfileGenerator.generateSimpleMotionProfile(\n                new MotionState(intake.getCurrentPosition(), intake.getVelocity(), 0),\n                new MotionState(ticks, 0, 0),\n                MAX_VEL,\n                MAX_ACCEL,\n                MAX_JERK\n        );\n\n        timer.reset();\n    }\n\n    public void followMotionProfile() {\n        MotionState state = storedProfile.get(timer.time());\n\n        currentVelocity = intake.getVelocity();\n        targetVelocity = state.getV();\n        velocityError = targetVelocity - currentVelocity;\n\n        intake.setTargetPosition((int) state.getX());\n        intake.setVelocity(state.getV());\n    }\n\n    public void setIntakePower(double power) {\n        intake.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        intake.setPower(power * POWER_WEIGHT);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java	
@@ -12,41 +12,22 @@
 import com.qualcomm.robotcore.hardware.HardwareMap;
 import com.qualcomm.robotcore.hardware.PIDFCoefficients;
 import com.qualcomm.robotcore.util.ElapsedTime;
+import com.qualcomm.robotcore.util.Range;
 
 @Config
 public class IntakeandLiftPID {
-    public static double TICKS_PER_REV = 384.5;
-    // TODO: TUNE SPOOL RADIUS FROM FILE
-    public static double SPOOL_RADIUS = .75;
-
-    public static PIDFCoefficients INTAKE_PID = new PIDFCoefficients(.009, 0, 0.0002, 0);
-
-    public static double MAX_VEL = 133000;
-    public static double MAX_ACCEL = 2000;
-    public static double MAX_JERK = 0;  // Jerk isn't used if it's 0, but it might end up being necessary
-
-    public static double POWER_WEIGHT = 0.8;
-
-    //Junction Positions listed in inches, later converted to encoder ticks
-    public static double HIGHJUNCTION = 33.5;
-    public static double MEDIUMJUNCTION = 23.5;
-    public static double LOWJUNCTION = 13.5;
-    public static double GROUNDJUNCTION = 0.563;
-    public static double PICKUP_CONE_1 = 5*1.22;
-    public static double PICKUP_CONE_2 = 4*1.22;
-    public static double PICKUP_CONE_3 = 3*1.22;
-    public static double PICKUP_CONE_4 = 2*1.22;
-    public static double PICKUP_CONE_5 = 1.22;
-
-    // TODO: Make private when we don't need them to be public anymore
     public ElapsedTime timer;
-    // TODO: Remove telemetry variables
+    public static PIDFCoefficients coeffs = new PIDFCoefficients(.009, 0, 0.0002, 0);
     public double currentVelocity = 0;
     public double targetVelocity = 0;
     public double velocityError = 0;
 
     public DcMotorEx intake;
     public Servo clawServo;
+    public static double maxVelocity = 133000;
+    public static double maxAcceleration = 2000;
+    public static double maxJerk = 0;  // Jerk isn't used if it's 0, but it might end up being necessary
+
     public MotionProfile storedProfile;
 
     public IntakeandLiftPID(HardwareMap hardwareMap) {
@@ -56,8 +37,9 @@
 
         intake.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
         intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);
-        intake.setPIDFCoefficients(DcMotor.RunMode.RUN_TO_POSITION, INTAKE_PID);
+        intake.setPIDFCoefficients(DcMotor.RunMode.RUN_TO_POSITION, coeffs);
         intake.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
+        intake.setDirection(DcMotorSimple.Direction.FORWARD);
     }
 
     public void clawOpen(){
@@ -67,38 +49,54 @@
         clawServo.setPosition(1.0);
     }
 
+    public void intakeLiftEasy(int targetTicks) {
+        intake.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
+        intake.setTargetPosition(targetTicks);
+        intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);
+        intake.setPower(0.7);
+    }
+
     public int distanceToEncoders(double distance){
-        double encoderRatio = TICKS_PER_REV/2 * Math.PI * SPOOL_RADIUS;
+        double encoderRatio = DriveConstants.LIFT_ENCODER_RES/2 * Math.PI * DriveConstants.SPOOL_RADIUS;
         double encoderConverted = distance*encoderRatio;
         int intEncoder = (int) encoderConverted;
         return intEncoder;
     }
 
     public void generateMotionProfile(double ticks) {
+        if (ticks == 0){
+            storedProfile = null;
+        }
+
+        // Based on 60RPM motor, adjust if different
         storedProfile = MotionProfileGenerator.generateSimpleMotionProfile(
-                new MotionState(intake.getCurrentPosition(), intake.getVelocity(), 0),
+                new MotionState(intake.getCurrentPosition(), 1600, 0),
                 new MotionState(ticks, 0, 0),
-                MAX_VEL,
-                MAX_ACCEL,
-                MAX_JERK
+                maxVelocity,
+                maxAcceleration,
+                maxJerk
         );
 
         timer.reset();
     }
 
-    public void followMotionProfile() {
+    public void followMotionProfile(){
+        // specify coefficients/gains
+        // create the controller
         MotionState state = storedProfile.get(timer.time());
-
         currentVelocity = intake.getVelocity();
         targetVelocity = state.getV();
         velocityError = targetVelocity - currentVelocity;
-
+        // in each iteration of the control loop
+        // measure the position or output variable
+        // apply the correction to the input variable
         intake.setTargetPosition((int) state.getX());
         intake.setVelocity(state.getV());
     }
 
-    public void setIntakePower(double power) {
-        intake.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
-        intake.setPower(power * POWER_WEIGHT);
-    }
-}
+    public void run(Gamepad gamepad) {
+            // Ability for manual control, which resets the motor's encoder value when done
+            intake.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
+            intake.setPower(-gamepad.left_stick_y * 0.7);
+        }
+    }
