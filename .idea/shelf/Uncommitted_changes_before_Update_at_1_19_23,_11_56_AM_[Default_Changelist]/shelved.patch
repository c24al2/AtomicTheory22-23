Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java
new file mode 100644
--- /dev/null	(date 1674147377275)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java	(date 1674147377275)
@@ -0,0 +1,91 @@
+package org.firstinspires.ftc.teamcode.drive;
+
+import static org.firstinspires.ftc.teamcode.drive.DriveConstants.WHEEL_RADIUS;
+
+import com.acmerobotics.roadrunner.geometry.Pose2d;
+
+import org.apache.commons.math3.linear.MatrixUtils;
+import org.apache.commons.math3.linear.RealMatrix;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Omni drive kinematic equations. All wheel positions and velocities are given starting with front left and
+ * proceeding counter-clockwise (i.e., front left, back wheel, front right). Robot poses are specified in a
+ * coordinate system with positive x pointing forward, positive y pointing left, and positive heading measured
+ * counter-clockwise from the x-axis.
+ *
+ * [This YouTube video](https://www.youtube.com/watch?v=NcOT9hOsceE) provides a derivation.
+ */
+public class OmniHardCodedKinematics {
+    private static RealMatrix calculateHMatrix(List<Pose2d> wheelPositions) {
+        RealMatrix hMatrix = MatrixUtils.createRealMatrix(3, 3);
+        for (int i = 0; i < wheelPositions.size(); i++) {
+            Pose2d wheelPosition = wheelPositions.get(i);
+            double cos = Math.cos(wheelPosition.getHeading());
+            double sin = Math.sin(wheelPosition.getHeading());
+            double[] rowData = {wheelPosition.getX() * sin - wheelPosition.getY() * cos, cos, sin};
+            hMatrix.setRow(i, rowData);
+        }
+        hMatrix = hMatrix.scalarMultiply((1 / WHEEL_RADIUS));
+        return hMatrix;
+    }
+
+    /**
+     * Computes the wheel velocities corresponding to [robotVel] given the provided [trackWidth] and
+     * [wheelBase].
+     *
+     * @param robotVel       velocity of the robot in its reference frame
+     * @param wheelPositions wheel positions *relative* to the robots reference frame
+     */
+    public static List<Double> robotToWheelVelocities(Pose2d robotVel, List<Pose2d> wheelPositions) {
+        RealMatrix hMatrix = calculateHMatrix(wheelPositions);
+        double[] robotVelMatrixData = {robotVel.getHeading(), robotVel.getX(), robotVel.getY()};
+        RealMatrix robotVelMatrix = MatrixUtils.createColumnRealMatrix(robotVelMatrixData);
+        RealMatrix wheelVelocitiesMatrix = hMatrix.multiply(robotVelMatrix);
+
+        List<Double> wheelVelocities = new ArrayList<>(wheelPositions.size());
+        for (double wheelVelocity : wheelVelocitiesMatrix.getColumn(0)) {
+            wheelVelocities.add(wheelVelocity);
+        }
+        return wheelVelocities;
+    }
+
+    /**
+     * Computes the wheel accelerations corresponding to [robotAccel] given the provided [trackWidth] and
+     * [wheelBase].
+     *
+     * @param robotAccel     acceleration of the robot in its reference frame
+     * @param wheelPositions wheel positions *relative* to the robots reference frame
+     */
+    // follows from linearity of the derivative
+    public static List<Double> robotToWheelAccelerations(Pose2d robotAccel, List<Pose2d> wheelPositions) {
+        return robotToWheelVelocities(robotAccel, wheelPositions);
+    }
+
+    /**
+     * Computes the robot velocity corresponding to [wheelVelocities] and the given drive parameters.
+     *
+     * @param wheelVelocities    wheel velocities (or wheel position deltas)
+     * @param omniWheelPositions wheel positions *relative* to the robots reference frame
+     */
+    public static Pose2d wheelToRobotVelocities(List<Double> wheelVelocities, List<Pose2d> omniWheelPositions) {
+        double[] wheelVelocitiesMatrixData = new double[wheelVelocities.size()];
+        for (int i = 0; i < wheelVelocities.size(); i++) {
+            wheelVelocitiesMatrixData[i] = wheelVelocities.get(i);
+        }
+        RealMatrix wheelVelocitiesMatrix = MatrixUtils.createColumnRealMatrix(wheelVelocitiesMatrixData);
+
+        RealMatrix hMatrix = calculateHMatrix(omniWheelPositions);
+        RealMatrix inverseHMatrix = MatrixUtils.inverse(hMatrix);
+
+        RealMatrix robotVelMatrix = inverseHMatrix.multiply(wheelVelocitiesMatrix);
+
+        return new Pose2d(
+                robotVelMatrix.getEntry(1, 0),
+                robotVelMatrix.getEntry(2, 0),
+                robotVelMatrix.getEntry(0, 0)
+        );
+    }
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision e634b9a357b6ba1a8d0416c78c3e80cfe8a42ae7)
+++ b/.idea/misc.xml	(date 1674104147166)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
