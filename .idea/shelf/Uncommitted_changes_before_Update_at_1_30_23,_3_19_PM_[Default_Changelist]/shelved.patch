Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.drive;\n\nimport com.acmerobotics.dashboard.config.Config;\nimport com.acmerobotics.roadrunner.profile.MotionProfile;\nimport com.acmerobotics.roadrunner.profile.MotionProfileGenerator;\nimport com.acmerobotics.roadrunner.profile.MotionState;\nimport com.qualcomm.robotcore.hardware.DcMotor;\nimport com.qualcomm.robotcore.hardware.DcMotorEx;\nimport com.qualcomm.robotcore.hardware.Servo;\nimport com.qualcomm.robotcore.hardware.HardwareMap;\nimport com.qualcomm.robotcore.hardware.PIDFCoefficients;\nimport com.qualcomm.robotcore.util.ElapsedTime;\n\n@Config\npublic class IntakeandLiftPID {\n    public static double TICKS_PER_REV = 384.5;\n    // TODO: TUNE SPOOL RADIUS FROM FILE\n    public static double SPOOL_RADIUS = .75;\n\n    public static PIDFCoefficients INTAKE_PID = new PIDFCoefficients(.009, 0, 0.0002, 0);\n\n    public static double MAX_VEL = 133000;\n    public static double MAX_ACCEL = 2000;\n    public static double MAX_JERK = 0;  // Jerk isn't used if it's 0, but it might end up being necessary\n\n    public static double POWER_WEIGHT = 0.8;\n\n    //Junction Positions listed in inches, later converted to encoder ticks\n    public static double HIGHJUNCTION = 33.5;\n    public static double MEDIUMJUNCTION = 23.5;\n    public static double LOWJUNCTION = 13.5;\n    public static double GROUNDJUNCTION = 0.563;\n    public static double PICKUP_CONE_1 = 5*1.22;\n    public static double PICKUP_CONE_2 = 4*1.22;\n    public static double PICKUP_CONE_3 = 3*1.22;\n    public static double PICKUP_CONE_4 = 2*1.22;\n    public static double PICKUP_CONE_5 = 1.22;\n\n    // TODO: Make private when we don't need them to be public anymore\n    public ElapsedTime timer;\n    // TODO: Remove telemetry variables\n    public double currentVelocity = 0;\n    public double targetVelocity = 0;\n    public double velocityError = 0;\n\n    public DcMotorEx intake;\n    public Servo clawServo;\n\n    private MotionProfile storedProfile;\n\n    public IntakeandLiftPID(HardwareMap hardwareMap) {\n        timer = new ElapsedTime();\n        intake = hardwareMap.get(DcMotorEx.class, \"intake\");\n        clawServo = hardwareMap.get(Servo.class, \"clawServo\");\n\n        intake.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);\n        intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n//        intake.setPIDFCoefficients(DcMotor.RunMode.RUN_TO_POSITION, INTAKE_PID);\n        intake.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);\n    }\n\n    public void clawOpen(){\n        clawServo.setPosition(-1.0);\n    }\n    public void clawClose(){\n        clawServo.setPosition(1.0);\n    }\n\n    public int distanceToEncoders(double distance){\n        double encoderRatio = TICKS_PER_REV/2 * Math.PI * SPOOL_RADIUS;\n        double encoderConverted = distance*encoderRatio;\n        int intEncoder = (int) encoderConverted;\n        return intEncoder;\n    }\n\n    public void generateMotionProfile(double ticks) {\n        storedProfile = MotionProfileGenerator.generateSimpleMotionProfile(\n                new MotionState(intake.getCurrentPosition(), intake.getVelocity(), 0),\n                new MotionState(ticks, 0, 0),\n                MAX_VEL,\n                MAX_ACCEL,\n                MAX_JERK\n        );\n\n        timer.reset();\n    }\n\n    public void followMotionProfile() {\n        MotionState state = storedProfile.get(timer.time());\n\n        currentVelocity = intake.getVelocity();\n        targetVelocity = state.getV();\n        velocityError = targetVelocity - currentVelocity;\n\n        intake.setTargetPosition((int) state.getX());\n        intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);\n        intake.setVelocity(state.getV());\n    }\n\n    public void setIntakePower(double power) {\n        intake.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\n        intake.setPower(power * POWER_WEIGHT);\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/IntakeandLiftPID.java	(date 1674834864476)
@@ -6,6 +6,7 @@
 import com.acmerobotics.roadrunner.profile.MotionState;
 import com.qualcomm.robotcore.hardware.DcMotor;
 import com.qualcomm.robotcore.hardware.DcMotorEx;
+import com.qualcomm.robotcore.hardware.DcMotorSimple;
 import com.qualcomm.robotcore.hardware.Servo;
 import com.qualcomm.robotcore.hardware.HardwareMap;
 import com.qualcomm.robotcore.hardware.PIDFCoefficients;
@@ -14,7 +15,6 @@
 @Config
 public class IntakeandLiftPID {
     public static double TICKS_PER_REV = 384.5;
-    // TODO: TUNE SPOOL RADIUS FROM FILE
     public static double SPOOL_RADIUS = .75;
 
     public static PIDFCoefficients INTAKE_PID = new PIDFCoefficients(.009, 0, 0.0002, 0);
@@ -22,19 +22,18 @@
     public static double MAX_VEL = 133000;
     public static double MAX_ACCEL = 2000;
     public static double MAX_JERK = 0;  // Jerk isn't used if it's 0, but it might end up being necessary
-
     public static double POWER_WEIGHT = 0.8;
 
     //Junction Positions listed in inches, later converted to encoder ticks
-    public static double HIGHJUNCTION = 33.5;
-    public static double MEDIUMJUNCTION = 23.5;
-    public static double LOWJUNCTION = 13.5;
+    public static double HIGHJUNCTION = 4.5;
+    public static double MEDIUMJUNCTION = 3.45;
+    public static double LOWJUNCTION = 2.2;
     public static double GROUNDJUNCTION = 0.563;
-    public static double PICKUP_CONE_1 = 5*1.22;
-    public static double PICKUP_CONE_2 = 4*1.22;
-    public static double PICKUP_CONE_3 = 3*1.22;
-    public static double PICKUP_CONE_4 = 2*1.22;
-    public static double PICKUP_CONE_5 = 1.22;
+    public static double PICKUP_CONE_1 = 0.65;
+    public static double PICKUP_CONE_2 = 0.55;
+    public static double PICKUP_CONE_3 = 0.45;
+    public static double PICKUP_CONE_4 = 0.35;
+    public static double PICKUP_CONE_5 = 0.25;
 
     // TODO: Make private when we don't need them to be public anymore
     public ElapsedTime timer;
@@ -54,7 +53,7 @@
         clawServo = hardwareMap.get(Servo.class, "clawServo");
 
         intake.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
-        intake.setMode(DcMotor.RunMode.RUN_TO_POSITION);
+        intake.setDirection(DcMotor.Direction.REVERSE);
 //        intake.setPIDFCoefficients(DcMotor.RunMode.RUN_TO_POSITION, INTAKE_PID);
         intake.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
     }
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.drive;\n\nimport com.acmerobotics.dashboard.config.Config;\nimport com.qualcomm.robotcore.hardware.PIDFCoefficients;\n\n/*\n * Constants shared between multiple drive types.\n *\n * TODO: Tune or adjust the following constants to fit your robot. Note that the non-final\n * fields may also be edited through the dashboard (connect to the robot's WiFi network and\n * navigate to https://192.168.49.1:8080/dash). Make sure to save the values here after you\n * adjust them in the dashboard; **config variable changes don't persist between app restarts**.\n *\n * These are not the only parameters; some are located in the localizer classes, drive base classes,\n * and op modes themselves.\n */\n@Config\npublic class DriveConstants {\n\n    /*\n     * These are motor constants that should be listed online for your motors.\n     */\n    public static final double TICKS_PER_REV = 537.7;\n    public static final double MAX_RPM = 312;\n\n    /*\n     * Set RUN_USING_ENCODER to true to enable built-in hub velocity control using drive encoders.\n     * Set this flag to false if drive encoders are not present and an alternative localization\n     * method is in use (e.g., tracking wheels).\n     *\n     * If using the built-in motor velocity PID, update MOTOR_VELO_PID with the tuned coefficients\n     * from DriveVelocityPIDTuner.\n     */\n    public static final boolean RUN_USING_ENCODER = false;\n    public static PIDFCoefficients MOTOR_VELO_PID = new PIDFCoefficients(0, 0, 0, getMotorVelocityF(MAX_RPM / 60 * TICKS_PER_REV));\n\n    /*\n     * These are physical constants that can be determined from your robot (including the track\n     * width; it will be tune empirically later although a rough estimate is important). Users are\n     * free to chose whichever linear distance unit they would like so long as it is consistently\n     * used. The default values were selected with inches in mind. Road runner uses radians for\n     * angular distances although most angular parameters are wrapped in Math.toRadians() for\n     * convenience. Make sure to exclude any gear ratio included in MOTOR_CONFIG from GEAR_RATIO.\n     */\n    public static double WHEEL_RADIUS = 1.8897637795; // in\n    public static double GEAR_RATIO = 1; // output (wheel) speed / input (motor) speed\n\n    /*\n     * These are the feedforward parameters used to model the drive motor behavior. If you are using\n     * the built-in velocity PID, *these values are fine as is*. However, if you do not have drive\n     * motor encoders or have elected not to use them for velocity control, these values should be\n     * empirically tuned.\n     */\n    public static double kV = 0.016;\n    public static double kA = 0.0025;\n    public static double kStatic = 0.002;\n\n    /*\n     * These values are used to generate the trajectories for you robot. To ensure proper operation,\n     * the constraints should never exceed ~80% of the robot's actual capabilities. While Road\n     * Runner is designed to enable faster autonomous motion, it is a good idea for testing to start\n     * small and gradually increase them later after everything is working. All distance units are\n     * inches.\n     */\n    public static double MAX_VEL = 30; // IDEAL: 42\n    public static double MAX_ACCEL = 30; // IDEAL: EQUAL TO MAX_VEL\n    public static double MAX_ANG_VEL = Math.toRadians(270); // IDEAL: 360\n    public static double MAX_ANG_ACCEL = Math.toRadians(90); // IDEAL: 180?\n\n    public static double encoderTicksToInches(double ticks) {\n        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV;\n    }\n\n    public static double rpmToVelocity(double rpm) {\n        return rpm * GEAR_RATIO * 2 * Math.PI * WHEEL_RADIUS / 60.0;\n    }\n\n    public static double getMotorVelocityF(double ticksPerSecond) {\n        // see https://docs.google.com/document/d/1tyWrXDfMidwYyP_5H4mZyVgaEswhOC35gvdmP-V-5hA/edit#heading=h.61g9ixenznbx\n        return 32767 / ticksPerSecond;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java	(date 1674856625379)
@@ -37,7 +37,7 @@
     /*
      * These are physical constants that can be determined from your robot (including the track
      * width; it will be tune empirically later although a rough estimate is important). Users are
-     * free to chose whichever linear distance unit they would like so long as it is consistently
+     * free to chose whichever linear distance unit they would like so long as it  is consistently
      * used. The default values were selected with inches in mind. Road runner uses radians for
      * angular distances although most angular parameters are wrapped in Math.toRadians() for
      * convenience. Make sure to exclude any gear ratio included in MOTOR_CONFIG from GEAR_RATIO.
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23,_10_27_PM_[Default_Changelist]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23,_10_27_PM_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23,_10_27_PM_[Default_Changelist]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23,_10_27_PM_[Default_Changelist]1/shelved.patch	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,19 +0,0 @@
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	
-+++ b/.idea/misc.xml	
-@@ -1,7 +1,7 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="11" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
-   <component name="ProjectType">
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_20_23,_5_53_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_20_23,_5_53_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_1_20_23,_5_53_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_20_23,_5_53_PM_[Default_Changelist]/shelved.patch	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,61 +0,0 @@
-Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package org.firstinspires.ftc.teamcode.drive;\n\nimport com.acmerobotics.dashboard.config.Config;\nimport com.qualcomm.robotcore.hardware.PIDFCoefficients;\n\n/*\n * Constants shared between multiple drive types.\n *\n * TODO: Tune or adjust the following constants to fit your robot. Note that the non-final\n * fields may also be edited through the dashboard (connect to the robot's WiFi network and\n * navigate to https://192.168.49.1:8080/dash). Make sure to save the values here after you\n * adjust them in the dashboard; **config variable changes don't persist between app restarts**.\n *\n * These are not the only parameters; some are located in the localizer classes, drive base classes,\n * and op modes themselves.\n */\n@Config\npublic class DriveConstants {\n\n    /*\n     * These are motor constants that should be listed online for your motors.\n     */\n    public static final double TICKS_PER_REV = 537.7;\n    public static final double MAX_RPM = 312;\n\n    /*\n     * Set RUN_USING_ENCODER to true to enable built-in hub velocity control using drive encoders.\n     * Set this flag to false if drive encoders are not present and an alternative localization\n     * method is in use (e.g., tracking wheels).\n     *\n     * If using the built-in motor velocity PID, update MOTOR_VELO_PID with the tuned coefficients\n     * from DriveVelocityPIDTuner.\n     */\n    public static final boolean RUN_USING_ENCODER = false;\n    public static PIDFCoefficients MOTOR_VELO_PID = new PIDFCoefficients(0, 0, 0, getMotorVelocityF(MAX_RPM / 60 * TICKS_PER_REV));\n\n    /*\n     * These are physical constants that can be determined from your robot (including the track\n     * width; it will be tune empirically later although a rough estimate is important). Users are\n     * free to chose whichever linear distance unit they would like so long as it is consistently\n     * used. The default values were selected with inches in mind. Road runner uses radians for\n     * angular distances although most angular parameters are wrapped in Math.toRadians() for\n     * convenience. Make sure to exclude any gear ratio included in MOTOR_CONFIG from GEAR_RATIO.\n     */\n    public static double WHEEL_RADIUS = 1.8897637795; // in\n    public static double GEAR_RATIO = 1; // output (wheel) speed / input (motor) speed\n\n    /*\n     * These are the feedforward parameters used to model the drive motor behavior. If you are using\n     * the built-in velocity PID, *these values are fine as is*. However, if you do not have drive\n     * motor encoders or have elected not to use them for velocity control, these values should be\n     * empirically tuned.\n     */\n    public static double kV = 1.0 / rpmToVelocity(MAX_RPM);\n    public static double kA = 0;\n    public static double kStatic = 0;\n\n    /*\n     * These values are used to generate the trajectories for you robot. To ensure proper operation,\n     * the constraints should never exceed ~80% of the robot's actual capabilities. While Road\n     * Runner is designed to enable faster autonomous motion, it is a good idea for testing to start\n     * small and gradually increase them later after everything is working. All distance units are\n     * inches.\n     */\n    public static double MAX_VEL = 30;\n    public static double MAX_ACCEL = 30;\n    public static double MAX_ANG_VEL = Math.toRadians(60);\n    public static double MAX_ANG_ACCEL = Math.toRadians(60);\n\n\n    public static double encoderTicksToInches(double ticks) {\n        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV;\n    }\n\n    public static double rpmToVelocity(double rpm) {\n        return rpm * GEAR_RATIO * 2 * Math.PI * WHEEL_RADIUS / 60.0;\n    }\n\n    public static double getMotorVelocityF(double ticksPerSecond) {\n        // see https://docs.google.com/document/d/1tyWrXDfMidwYyP_5H4mZyVgaEswhOC35gvdmP-V-5hA/edit#heading=h.61g9ixenznbx\n        return 32767 / ticksPerSecond;\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java
---- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java	(revision 8d3338f2e0c021849358d965d6feff44084196b1)
-+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/DriveConstants.java	(date 1674168344548)
-@@ -43,7 +43,7 @@
-      * convenience. Make sure to exclude any gear ratio included in MOTOR_CONFIG from GEAR_RATIO.
-      */
-     public static double WHEEL_RADIUS = 1.8897637795; // in
--    public static double GEAR_RATIO = 1; // output (wheel) speed / input (motor) speed
-+    public static double GEAR_RATIO = 19.2; // output (wheel) speed / input (motor) speed
- 
-     /*
-      * These are the feedforward parameters used to model the drive motor behavior. If you are using
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision 8d3338f2e0c021849358d965d6feff44084196b1)
-+++ b/.idea/misc.xml	(date 1674167322192)
-@@ -1,7 +1,7 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="11" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
-   <component name="ProjectType">
-Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package org.firstinspires.ftc.teamcode.drive;\n\nimport androidx.annotation.NonNull;\n\nimport com.acmerobotics.dashboard.config.Config;\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\nimport com.acmerobotics.roadrunner.localization.ThreeTrackingWheelLocalizer;\nimport com.qualcomm.robotcore.hardware.DcMotorEx;\nimport com.qualcomm.robotcore.hardware.HardwareMap;\nimport org.firstinspires.ftc.teamcode.util.Encoder;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@Config\npublic class OdometryLocalizer extends ThreeTrackingWheelLocalizer {\n    private final static List<Pose2d> WHEEL_POSITIONS = Arrays.asList(\n            new Pose2d(0, 2, 0), // left\n            new Pose2d(0, -2, 0), // right\n            new Pose2d(2, 0, Math.toRadians(90)) // front\n    );\n\n    public static double TICKS_PER_REV = 0;\n    public static double WHEEL_RADIUS = 2; // in\n    public static double GEAR_RATIO = 1; // output (wheel) speed / input (encoder) speed\n\n    private Encoder leftEncoder;\n    private Encoder rightEncoder;\n    private Encoder backEncoder;\n\n    public OdometryLocalizer(HardwareMap hardwareMap) {\n        super(WHEEL_POSITIONS);\n\n        leftEncoder = new Encoder(hardwareMap.get(DcMotorEx.class, \"le\"));\n        rightEncoder = new Encoder(hardwareMap.get(DcMotorEx.class, \"re\"));\n        backEncoder = new Encoder(hardwareMap.get(DcMotorEx.class, \"be\"));\n\n        // TODO: reverse any encoders using Encoder.setDirection(Encoder.Direction.REVERSE)\n    }\n\n    public static double encoderTicksToInches(double ticks) {\n        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV;\n    }\n\n    @NonNull\n    @Override\n    public List<Double> getWheelPositions() {\n        return Arrays.asList(\n                encoderTicksToInches(leftEncoder.getCurrentPosition()),\n                encoderTicksToInches(rightEncoder.getCurrentPosition()),\n                encoderTicksToInches(backEncoder.getCurrentPosition())\n        );\n    }\n\n    @NonNull\n    @Override\n    public List<Double> getWheelVelocities() {\n        // TODO: If your encoder velocity can exceed 32767 counts / second (such as the REV Through Bore and other\n        //  competing magnetic encoders), change Encoder.getRawVelocity() to Encoder.getCorrectedVelocity() to enable a\n        //  compensation method\n\n        return Arrays.asList(\n                encoderTicksToInches(leftEncoder.getRawVelocity()),\n                encoderTicksToInches(rightEncoder.getRawVelocity()),\n                encoderTicksToInches(backEncoder.getRawVelocity())\n        );\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java
---- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java	(revision 8d3338f2e0c021849358d965d6feff44084196b1)
-+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java	(date 1674167508841)
-@@ -20,9 +20,9 @@
-             new Pose2d(2, 0, Math.toRadians(90)) // front
-     );
- 
--    public static double TICKS_PER_REV = 0;
--    public static double WHEEL_RADIUS = 2; // in
--    public static double GEAR_RATIO = 1; // output (wheel) speed / input (encoder) speed
-+    public static double TICKS_PER_REV = 537.7;
-+    public static double WHEEL_RADIUS = 1.88; // in
-+    public static double GEAR_RATIO = 1/19.2; // output (wheel) speed / input (encoder) speed
- 
-     private Encoder leftEncoder;
-     private Encoder rightEncoder;
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23__10_27_PM__Default_Changelist_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23__10_27_PM__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23__10_27_PM__Default_Changelist_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23__10_27_PM__Default_Changelist_1.xml	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Checkout_at_1_20_23,_10_27_PM_[Default_Changelist]1" date="1674271672782" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_1_20_23,_10_27_PM_[Default_Changelist]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at 1/20/23, 10:27 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__5_28_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__5_28_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__5_28_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__5_28_PM__Default_Changelist_.xml	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_1_19_23,_5_28_PM_[Default_Changelist]" date="1674167322431" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_5_28_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 1/19/23, 5:28 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_20_23__5_53_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_20_23__5_53_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_1_20_23__5_53_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_20_23__5_53_PM__Default_Changelist_.xml	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_1_20_23,_5_53_PM_[Default_Changelist]" date="1674255218878" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_20_23,_5_53_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 1/20/23, 5:53 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__11_56_AM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__11_56_AM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__11_56_AM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23__11_56_AM__Default_Changelist_.xml	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_1_19_23,_11_56_AM_[Default_Changelist]" date="1674147378663" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_11_56_AM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 1/19/23, 11:56 AM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_11_56_AM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_11_56_AM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_11_56_AM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_11_56_AM_[Default_Changelist]/shelved.patch	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,120 +0,0 @@
-Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java
-new file mode 100644
---- /dev/null	(date 1674147377275)
-+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OmniHardCodedKinematics.java	(date 1674147377275)
-@@ -0,0 +1,91 @@
-+package org.firstinspires.ftc.teamcode.drive;
-+
-+import static org.firstinspires.ftc.teamcode.drive.DriveConstants.WHEEL_RADIUS;
-+
-+import com.acmerobotics.roadrunner.geometry.Pose2d;
-+
-+import org.apache.commons.math3.linear.MatrixUtils;
-+import org.apache.commons.math3.linear.RealMatrix;
-+
-+import java.util.ArrayList;
-+import java.util.List;
-+
-+/**
-+ * Omni drive kinematic equations. All wheel positions and velocities are given starting with front left and
-+ * proceeding counter-clockwise (i.e., front left, back wheel, front right). Robot poses are specified in a
-+ * coordinate system with positive x pointing forward, positive y pointing left, and positive heading measured
-+ * counter-clockwise from the x-axis.
-+ *
-+ * [This YouTube video](https://www.youtube.com/watch?v=NcOT9hOsceE) provides a derivation.
-+ */
-+public class OmniHardCodedKinematics {
-+    private static RealMatrix calculateHMatrix(List<Pose2d> wheelPositions) {
-+        RealMatrix hMatrix = MatrixUtils.createRealMatrix(3, 3);
-+        for (int i = 0; i < wheelPositions.size(); i++) {
-+            Pose2d wheelPosition = wheelPositions.get(i);
-+            double cos = Math.cos(wheelPosition.getHeading());
-+            double sin = Math.sin(wheelPosition.getHeading());
-+            double[] rowData = {wheelPosition.getX() * sin - wheelPosition.getY() * cos, cos, sin};
-+            hMatrix.setRow(i, rowData);
-+        }
-+        hMatrix = hMatrix.scalarMultiply((1 / WHEEL_RADIUS));
-+        return hMatrix;
-+    }
-+
-+    /**
-+     * Computes the wheel velocities corresponding to [robotVel] given the provided [trackWidth] and
-+     * [wheelBase].
-+     *
-+     * @param robotVel       velocity of the robot in its reference frame
-+     * @param wheelPositions wheel positions *relative* to the robots reference frame
-+     */
-+    public static List<Double> robotToWheelVelocities(Pose2d robotVel, List<Pose2d> wheelPositions) {
-+        RealMatrix hMatrix = calculateHMatrix(wheelPositions);
-+        double[] robotVelMatrixData = {robotVel.getHeading(), robotVel.getX(), robotVel.getY()};
-+        RealMatrix robotVelMatrix = MatrixUtils.createColumnRealMatrix(robotVelMatrixData);
-+        RealMatrix wheelVelocitiesMatrix = hMatrix.multiply(robotVelMatrix);
-+
-+        List<Double> wheelVelocities = new ArrayList<>(wheelPositions.size());
-+        for (double wheelVelocity : wheelVelocitiesMatrix.getColumn(0)) {
-+            wheelVelocities.add(wheelVelocity);
-+        }
-+        return wheelVelocities;
-+    }
-+
-+    /**
-+     * Computes the wheel accelerations corresponding to [robotAccel] given the provided [trackWidth] and
-+     * [wheelBase].
-+     *
-+     * @param robotAccel     acceleration of the robot in its reference frame
-+     * @param wheelPositions wheel positions *relative* to the robots reference frame
-+     */
-+    // follows from linearity of the derivative
-+    public static List<Double> robotToWheelAccelerations(Pose2d robotAccel, List<Pose2d> wheelPositions) {
-+        return robotToWheelVelocities(robotAccel, wheelPositions);
-+    }
-+
-+    /**
-+     * Computes the robot velocity corresponding to [wheelVelocities] and the given drive parameters.
-+     *
-+     * @param wheelVelocities    wheel velocities (or wheel position deltas)
-+     * @param omniWheelPositions wheel positions *relative* to the robots reference frame
-+     */
-+    public static Pose2d wheelToRobotVelocities(List<Double> wheelVelocities, List<Pose2d> omniWheelPositions) {
-+        double[] wheelVelocitiesMatrixData = new double[wheelVelocities.size()];
-+        for (int i = 0; i < wheelVelocities.size(); i++) {
-+            wheelVelocitiesMatrixData[i] = wheelVelocities.get(i);
-+        }
-+        RealMatrix wheelVelocitiesMatrix = MatrixUtils.createColumnRealMatrix(wheelVelocitiesMatrixData);
-+
-+        RealMatrix hMatrix = calculateHMatrix(omniWheelPositions);
-+        RealMatrix inverseHMatrix = MatrixUtils.inverse(hMatrix);
-+
-+        RealMatrix robotVelMatrix = inverseHMatrix.multiply(wheelVelocitiesMatrix);
-+
-+        return new Pose2d(
-+                robotVelMatrix.getEntry(1, 0),
-+                robotVelMatrix.getEntry(2, 0),
-+                robotVelMatrix.getEntry(0, 0)
-+        );
-+    }
-+}
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision e634b9a357b6ba1a8d0416c78c3e80cfe8a42ae7)
-+++ b/.idea/misc.xml	(date 1674104147166)
-@@ -1,7 +1,7 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
-   <component name="ProjectType">
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_5_28_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_5_28_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_5_28_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_19_23,_5_28_PM_[Default_Changelist]/shelved.patch	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
+++ /dev/null	(revision 3db91590093c556fed4d936ba45e52f083b7f463)
@@ -1,42 +0,0 @@
-Index: .idea/misc.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/misc.xml b/.idea/misc.xml
---- a/.idea/misc.xml	(revision fa87a49e95e41974e6d3177eed49d04719f1273e)
-+++ b/.idea/misc.xml	(date 1674165426335)
-@@ -1,7 +1,7 @@
- <?xml version="1.0" encoding="UTF-8"?>
- <project version="4">
-   <component name="ExternalStorageConfigurationManager" enabled="true" />
--  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
-+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="11" project-jdk-type="JavaSDK">
-     <output url="file://$PROJECT_DIR$/build/classes" />
-   </component>
-   <component name="ProjectType">
-Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package org.firstinspires.ftc.teamcode.drive;\n\nimport androidx.annotation.NonNull;\n\nimport com.acmerobotics.dashboard.config.Config;\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\nimport com.acmerobotics.roadrunner.localization.ThreeTrackingWheelLocalizer;\nimport com.qualcomm.robotcore.hardware.DcMotorEx;\nimport com.qualcomm.robotcore.hardware.HardwareMap;\nimport org.firstinspires.ftc.teamcode.util.Encoder;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n@Config\npublic class OdometryLocalizer extends ThreeTrackingWheelLocalizer {\n    private final static List<Pose2d> WHEEL_POSITIONS = Arrays.asList(\n            new Pose2d(0, 2, 0), // left\n            new Pose2d(0, -2, 0), // right\n            new Pose2d(2, 0, Math.toRadians(90)) // front\n    );\n\n    public static double TICKS_PER_REV = 0;\n    public static double WHEEL_RADIUS = 2; // in\n    public static double GEAR_RATIO = 1; // output (wheel) speed / input (encoder) speed\n\n    private Encoder leftEncoder;\n    private Encoder rightEncoder;\n    private Encoder backEncoder;\n\n    public OdometryLocalizer(HardwareMap hardwareMap) {\n        super(WHEEL_POSITIONS);\n\n        leftEncoder = new Encoder(hardwareMap.get(DcMotorEx.class, \"le\"));\n        rightEncoder = new Encoder(hardwareMap.get(DcMotorEx.class, \"re\"));\n        backEncoder = new Encoder(hardwareMap.get(DcMotorEx.class, \"be\"));\n\n        // TODO: reverse any encoders using Encoder.setDirection(Encoder.Direction.REVERSE)\n    }\n\n    public static double encoderTicksToInches(double ticks) {\n        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV;\n    }\n\n    @NonNull\n    @Override\n    public List<Double> getWheelPositions() {\n        return Arrays.asList(\n                encoderTicksToInches(leftEncoder.getCurrentPosition()),\n                encoderTicksToInches(rightEncoder.getCurrentPosition()),\n                encoderTicksToInches(backEncoder.getCurrentPosition())\n        );\n    }\n\n    @NonNull\n    @Override\n    public List<Double> getWheelVelocities() {\n        // TODO: If your encoder velocity can exceed 32767 counts / second (such as the REV Through Bore and other\n        //  competing magnetic encoders), change Encoder.getRawVelocity() to Encoder.getCorrectedVelocity() to enable a\n        //  compensation method\n\n        return Arrays.asList(\n                encoderTicksToInches(leftEncoder.getRawVelocity()),\n                encoderTicksToInches(rightEncoder.getRawVelocity()),\n                encoderTicksToInches(backEncoder.getRawVelocity())\n        );\n    }\n}\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java
---- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java	(revision fa87a49e95e41974e6d3177eed49d04719f1273e)
-+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/OdometryLocalizer.java	(date 1674167211261)
-@@ -20,9 +20,9 @@
-             new Pose2d(2, 0, Math.toRadians(90)) // front
-     );
- 
--    public static double TICKS_PER_REV = 0;
--    public static double WHEEL_RADIUS = 2; // in
--    public static double GEAR_RATIO = 1; // output (wheel) speed / input (encoder) speed
-+    public static double TICKS_PER_REV = 537.7;
-+    public static double WHEEL_RADIUS = 1.88; // in
-+    public static double GEAR_RATIO = 19.2; // output (wheel) speed / input (encoder) speed
- 
-     private Encoder leftEncoder;
-     private Encoder rightEncoder;
